(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{497:function(t,e,a){"use strict";a.r(e);var r=a(28),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"初始化项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化项目"}},[t._v("#")]),t._v(" 初始化项目")]),t._v(" "),a("h2",{attrs:{id:"如何编写代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何编写代码"}},[t._v("#")]),t._v(" 如何编写代码")]),t._v(" "),a("p",[t._v("1.在浏览器中编写本教程代码-这是上手最快的一种方式了！")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://codepen.io/gaearon/pen/oWWQNa?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[t._v("Codepen"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("React 在 0.14 发布（2015），原本的 react package 拆分为 react 和 react-dom。")]),t._v(" "),a("ul",[a("li",[t._v("react package 包含 React.createElement、 .createClass、 .Component， .PropTypes， .Children 这些 API；")]),t._v(" "),a("li",[t._v("react-dom package 中包含 ReactDOM.render、 .unmountComponentAtNode、.findDOMNode；")]),t._v(" "),a("li",[t._v("原本在服务端渲染用的两个 API .renderToString 和 .renderToStaticMarkup 被放在了react-dom/server 中；")])]),t._v(" "),a("p",[t._v("2.在代码编辑器中编写本教程代码\n同样，你也可以试着在自己的电脑上搭建起开发运行环境来。为了以后实战，所以后面代码编程我们会在本地编辑器中编程。虽然在本地搭建环境要费一些功夫，但好处是你可以任意选择你惯用的编辑器来完成开发。说得再好不如动手做一次，那么跟着下面的步骤开始搭建吧：")]),t._v(" "),a("ul",[a("li",[t._v("确保你电脑上安装了最新版本的 "),a("strong",[t._v("Node.js")]),t._v("；")]),t._v(" "),a("li",[t._v("安装脚手架 "),a("code",[t._v("npm install -g create-react-app")]),t._v("；")]),t._v(" "),a("li",[t._v("创建项目")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("create"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("react"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("app myapp\n\n# Installing packages"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" This might take a couple "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" minutes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n# Installing react"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" react"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("dom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" and react"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("scripts "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" cra"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("template"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n")])])]),a("h2",{attrs:{id:"为什么需要脚手架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要脚手架"}},[t._v("#")]),t._v(" 为什么需要脚手架")]),t._v(" "),a("p",[t._v("一个普通的网页基本都会包含 HTML，CSS 和 JS 三个关键的元素。这一点多年以来都是没有改变的，但是前端的开发模式已经发生了很大的变化。以往我们写的网页前端代码都是可以通过浏览器打开后能够直接运行的，但是现在对于大部分前端项目来说，我们写的代码其实并不是原生的 JS，HTML 和 CSS，而是基于它们扩展出来的更上层的语法。")]),t._v(" "),a("p",[t._v("本课程（React 小书），将会大量编写 React 组件（实际上 antd 就是 Ant Design 的 React 组件的实现），这些组件需要通过编译为最终的 JS 和 CSS，然后引入到 HTML 网页中才能够被浏览器正确地执行。")]),t._v(" "),a("p",[t._v("由于存在一个编译过程，这就需要基于编译工具搭建一个项目的脚手架，使得我们可以通过工具实现代码的编译。通过编译后的代码才是浏览器能够执行的代码，这样我们才能进行项目的开发和最终的部署。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/ruizhengyun/ruizhengyun.github.io/issues/12",target:"_blank",rel:"noopener noreferrer"}},[t._v("阅读原文"),a("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);
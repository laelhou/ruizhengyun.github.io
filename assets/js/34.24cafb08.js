(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{293:function(t,s,a){t.exports=a.p+"assets/img/conditional-breakpoints.11b468a0.gif"},294:function(t,s,a){t.exports=a.p+"assets/img/conditional-breakpoints2.6e7c07fc.gif"},419:function(t,s,a){"use strict";a.r(s);var n=a(28),o=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"忍者打印"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#忍者打印"}},[t._v("#")]),t._v(" 忍者打印")]),t._v(" "),n("p",[t._v("有时你设置的断点是不是被执行了太多次？假设有一个包含 "),n("strong",[t._v("200 个元素的循环")]),t._v("，但是你只对"),n("strong",[t._v("第 110 次循环")]),t._v("的结果感兴趣，又或者你只对一些满足某些条件的结果感兴趣，怎么办呢？这就是我们要说的条件断点：")]),t._v(" "),n("h2",{attrs:{id:"conditional-breakpoints-条件断点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#conditional-breakpoints-条件断点"}},[t._v("#")]),t._v(" Conditional breakpoints 条件断点")]),t._v(" "),n("p",[t._v("这样的情况下，你可以设置一个条件断点：")]),t._v(" "),n("p",[t._v("右击行号，选择 "),n("code",[t._v("Add conditional breakpoint...")]),t._v("(添加条件断点)")]),t._v(" "),n("p",[t._v("或者右击一个已经设置的断点并且选择 Edit breakpoint(编辑断点)")]),t._v(" "),n("p",[t._v("然后输入一个执行结果为 "),n("code",[t._v("true")]),t._v(" 或者 "),n("code",[t._v("false")]),t._v(" 的表达式（它的值其实不需要完全为 "),n("code",[t._v("true")]),t._v(" 或者 "),n("code",[t._v("false")]),t._v(" 尽管那个弹出框的描述是这样说的）。")]),t._v(" "),n("p",[t._v("在这个表达式中你可以使用任何这段代码可以获取到的值（当前行的作用域）。")]),t._v(" "),n("p",[t._v("如果条件成立，这个断点就会暂停代码的执行：")]),t._v(" "),n("p",[t._v("保存在 "),n("code",[t._v("source > snippets > conditional-breakpoints.js")]),t._v(" 中的代码")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" aa "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Array")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("random"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" v "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(293),alt:""}})]),t._v(" "),n("h2",{attrs:{id:"console-log"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#console-log"}},[t._v("#")]),t._v(" console.log")]),t._v(" "),n("p",[t._v("得益于条件断点，"),n("code",[t._v("console.log")]),t._v(" 也有了新玩法：")]),t._v(" "),n("p",[t._v("每一个条件都必须经过判断 - 当应用执行到这一行的时候进行判断\n并且如果条件返回的是 "),n("code",[t._v("falsy")]),t._v(" 的值(这里的 "),n("code",[t._v("falsy")]),t._v("并非是笔误，"),n("code",[t._v("falsy")]),t._v(" 指的是被判定为 "),n("code",[t._v("false")]),t._v(" 的值，例如 "),n("code",[t._v("undefined")]),t._v(" )，它并不会暂停..\n与其在你的源码的不同地方去添加 "),n("code",[t._v("console.log / console.table / console.time / console.timeEnd")]),t._v(" 等等，不如你直接使用条件判断来将它们“连接”到 "),n("code",[t._v("Source")]),t._v(" 面板中。 这样的话，它们会一直执行，并且当你不再需要它们的时候，在 "),n("code",[t._v("Breakpoints section")]),t._v(" 会清晰的列出它们。点两下鼠标你就可以把所有的都移除，就像一堆忍者一样突然消失！")]),t._v(" "),n("p",[n("img",{attrs:{src:a(294),alt:""}})]),t._v(" "),n("blockquote",[n("p",[t._v("这个技术在调试生产环境的问题时同样很有用，因为你通过这样的方式轻松将 "),n("code",[t._v("console logs")]),t._v(" 插入到 "),n("code",[t._v("source")]),t._v(" 里。")])]),t._v(" "),n("hr"),t._v(" "),n("ul",[n("li",[n("RouterLink",{attrs:{to:"/frontend/chrome/async.html"}},[t._v("上一章：异步的 console")])],1),t._v(" "),n("li",[n("RouterLink",{attrs:{to:"/frontend/chrome/custom_formatter.html"}},[t._v("下一章：自定义格式转换器")])],1)])])}),[],!1,null,null,null);s.default=o.exports}}]);
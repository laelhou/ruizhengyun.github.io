(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{480:function(t,e,a){"use strict";a.r(e);var v=a(28),_=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"语义化版本控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语义化版本控制"}},[t._v("#")]),t._v(" 语义化版本控制")]),t._v(" "),a("h2",{attrs:{id:"场景引入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景引入"}},[t._v("#")]),t._v(" 场景引入")]),t._v(" "),a("p",[t._v("开发时，经常需要依赖一些模块（包），我们进行了下载之后，便一直在该版本的模块环境下进行开发，但是线上的服务器（其他开发者）一般都是根据依赖来配置文件，重新下载各个模块，但是保不齐某个模块的版本已经更新了，这时线上的包会更新到最新的版本，但你的代码还是依据老版本来写的，这时可能会产生一些不知名的 Bug。")]),t._v(" "),a("p",[t._v("为了保持 JavaScript 生态系统的健康，可靠和安全，npm 软件包进行重大更新时，建议在 "),a("code",[t._v("package.json")]),t._v(" 文件中发布带有更新版本号的软件包的新版本，文件遵循语义版本规范。")]),t._v(" "),a("p",[t._v("遵循语义版本规范可以帮助依赖代码的其他开发人员了解给定版本中的更改范围，并在必要时调整自己的代码。")]),t._v(" "),a("h2",{attrs:{id:"关于语义版本控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于语义版本控制"}},[t._v("#")]),t._v(" 关于语义版本控制")]),t._v(" "),a("p",[t._v("为了帮助依赖你的代码的开发人员，建议在 "),a("code",[t._v("1.0.0")]),t._v(" 开始包版本并按如下方式递增。npm 包的版本号的格式 "),a("code",[t._v("x.y.z")]),t._v("，版本好的格式遵循 semver 2.0 规范。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("代码状态")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("阶段")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("规则")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("示例版本")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("首发")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("新产品"),a("br"),t._v("New product")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("从1.0.0开始")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("1.0.0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("向后兼容的错误修复")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("补丁发布"),a("br"),t._v("Patch release")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("第三位数增加")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("1.0.1")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("向后兼容的新功能")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("次要发布"),a("br"),t._v("Minor release")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("中间数字增加"),a("br"),t._v("并将最后一个数字重置为零")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("1.1.0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("破坏向后兼容性的更改")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("主要发布"),a("br"),t._v("Major release")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("第一个数字增加"),a("br"),t._v("并将中间和最后一个数字重置为零")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("2.0.0")])])])]),t._v(" "),a("h2",{attrs:{id:"版本规范识别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本规范识别"}},[t._v("#")]),t._v(" 版本规范识别")]),t._v(" "),a("h3",{attrs:{id:"脱字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#脱字符"}},[t._v("#")]),t._v(" 脱字符 "),a("code",[t._v("^")])]),t._v(" "),a("p",[t._v("npm 通过脱字符(^)来限定所安装模块的主版本号，而该脱字符对于不同的版本号有不同的更新机制。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("^1.2.1")]),t._v(" 更新版本范围为 "),a("code",[t._v(">=1.2.1 && < 2.0.0")]),t._v(";")]),t._v(" "),a("li",[a("code",[t._v("^0.2.1")]),t._v(" 更新版本范围为 "),a("code",[t._v(">=0.2.1 && < 0.3.0")]),t._v(";")]),t._v(" "),a("li",[a("code",[t._v("^0.0.1")]),t._v(" 更新版本范围为 "),a("code",[t._v("0.0.2")]),t._v("（相当于锁定为了 "),a("code",[t._v("0.0.2")]),t._v(" 版本）;")])]),t._v(" "),a("h3",{attrs:{id:"波浪号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#波浪号"}},[t._v("#")]),t._v(" 波浪号 "),a("code",[t._v("~")])]),t._v(" "),a("p",[t._v("限定模块的次要版本。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("~1.2.1")]),t._v(" 更新版本范围为 "),a("code",[t._v(">=1.2.1 && < 1.3.0")]),t._v(";")]),t._v(" "),a("li",[a("code",[t._v("~0.2.1")]),t._v(" 更新版本范围为 "),a("code",[t._v("0.3.0")]),t._v("（相当于锁定为了 "),a("code",[t._v("0.3.0")]),t._v(" 版本）;")]),t._v(" "),a("li",[t._v("当主版本号/次版本号/修订版本号为 "),a("code",[t._v("X or x or *")]),t._v(" 时，那么 "),a("code",[t._v("update")]),t._v(" 或 "),a("code",[t._v("install")]),t._v(" 是会下载该分支最新的版本号;")])]),t._v(" "),a("h3",{attrs:{id:"星号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#星号"}},[t._v("#")]),t._v(" 星号 "),a("code",[t._v("*")])]),t._v(" "),a("p",[t._v("跟新或安装模块时会安装>=0.0.0的最新版本")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("1.x")]),t._v(" 更新版本范围为 "),a("code",[t._v(">=1.0.0&&< 2.0.0")]),t._v(";")]),t._v(" "),a("li",[a("code",[t._v("1.2.x")]),t._v(" 更新版本范围为 "),a("code",[t._v(">=1.2.0&&< 1.3.0")]),t._v(";")])]),t._v(" "),a("h3",{attrs:{id:"更多"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更多"}},[t._v("#")]),t._v(" 更多")]),t._v(" "),a("p",[t._v("1.可以把项目依赖的包固定在某一个版本，强制大家安装相同的依赖树")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("npm install react "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("save "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("E")]),t._v("\n")])])]),a("p",[t._v("上面命令会将 "),a("code",[t._v("react")]),t._v(" 的版本号进行固定，但是该方式只能控制项目中直接依赖的包的版本，无法控制项目模块中依赖的包的版本号，所以这种方式也无法让不同的使用者得到相同的依赖树。")]),t._v(" "),a("p",[t._v("2.使用 "),a("code",[t._v("npm shrinkwrap")]),t._v("，可以将项目中的模块版本进行精确锁定\n运行命令 "),a("code",[t._v("npm shrinkwrap")]),t._v("，会产生一个 "),a("code",[t._v("npm-shrinkwrap.json")]),t._v(" 文件，这个文件保存了所有当前使用的依赖模块的版本。把该文件提交到 git 仓库中，这样其他人在 clone 你的项目的时候，执行 npm install 命令时，npm 检测到该文件中的信息会完整的还原出完全相同的依赖树。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("npm install "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("save"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("dev react "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 安装react")]),t._v("\nnpm prune    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 清除未被使用的模块")]),t._v("\nnpm shrinkwrap\n")])])]),a("blockquote",[a("p",[t._v("注：这种方式，安装一个模块包的方式显得有些比较繁琐")])]),t._v(" "),a("p",[t._v("3.使用 yarn 可以得到模块包精确控制的结果\nyarn 是一个与 npm 兼容的 node 包管理器，使用它安装 npm 包，会自动在项目目录创建一个yarn.lock 文件，该文件包含了当前项目中所安装的依赖包的版本信息，其他人在使用 yarn 安装项目的依赖包时就可以通过该文件创建一个完全相同的依赖环境。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("yarn init  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用yarn创建一个项目")]),t._v("\nyarn add "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用yarn 安装一个包")]),t._v("\n")])])]),a("p",[t._v("此外，yarn 除了可以自动帮我们锁定依赖包的版本，yarn 还在本地缓存已经安装过的包，当再次安装时，直接从本地读取即可。安装速度得到大大提升。但 yarn 的使用需要整个团队都去使用，还是有一定的成本的。")]),t._v(" "),a("h2",{attrs:{id:"semver-semantic-versioning-2-0-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#semver-semantic-versioning-2-0-0"}},[t._v("#")]),t._v(" SemVer(Semantic Versioning) 2.0.0")]),t._v(" "),a("p",[t._v("SemVer 是一个对 npm 包版本进行规范的模块，它对于 npm 包的版本号有着一系列的规则，以下为部分 SemVer 2.0.0 中的规则。")]),t._v(" "),a("ul",[a("li",[t._v("在版本控制环节我们已经说过了，模块的版本号采用 "),a("code",[t._v("X.Y.Z")]),t._v(" 的格式，且都必须为非负的正整数，依次为主版本号、次版本号，修改版本号；")]),t._v(" "),a("li",[t._v("当规定版本的模块进行发布之后，对于该模块的任何修改，都必须发布新版本；")]),t._v(" "),a("li",[t._v("主版本号为 "),a("code",[t._v("0.X.Y")]),t._v(" 的模块处于开发阶段，模块并不稳定；")]),t._v(" "),a("li",[t._v("主版本号在有不向下兼容的 API 发布时必须修改，在主版本号递增时，次版本号和修订版本号必须重新归零；")]),t._v(" "),a("li",[t._v("次版本号再有向下兼容的 API 发布时进行递增修改，在模块中有 API 被弃用时也必须递增次版本号，当此版本号递增改变时，修订版本号 Z 必须归零；")]),t._v(" "),a("li",[t._v("版本的优先级就是各个版本的排序规则，判断版本优先级时，必须把版本号从左至右分为主版本号、此版本号、修订版本号、以及先行版本号来进行比较；")])])])}),[],!1,null,null,null);e.default=_.exports}}]);
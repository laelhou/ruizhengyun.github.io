(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{304:function(t,e,v){t.exports=v.p+"assets/img/react.pattern.98fa96d2.png"},305:function(t,e,v){t.exports=v.p+"assets/img/redux.pattern.f82ea229.png"},306:function(t,e,v){t.exports=v.p+"assets/img/redux-saga.pattern.36d0c5d9.png"},307:function(t,e,v){t.exports=v.p+"assets/img/dva.pattern.739a746f.png"},454:function(t,e,v){"use strict";v.r(e);var _=v(28),a=Object(_.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"react-模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#react-模式"}},[t._v("#")]),t._v(" react 模式")]),t._v(" "),_("p",[_("img",{attrs:{src:v(304),alt:""}})]),t._v(" "),_("p",[t._v("如果多个 Component 之间要发生交互, 那么状态即数据就要维护在这些 Component 的最小公约父节点上, 即示例中的 "),_("code",[t._v("<App/>")]),t._v(" 组件。")]),t._v(" "),_("p",[t._v("对于 "),_("code",[t._v("<AddTodoBtn/>")]),t._v("、"),_("code",[t._v("<TodoList/>")]),t._v(" 和 "),_("code",[t._v("<Todo/>")]),t._v(" 组件其本身不维护任何 state, 完全由父组件 "),_("code",[t._v("<App/>")]),t._v(" 传入 props 以决定其展现, 是一个纯函数的存在形式, 即模板组件、纯组件、木偶组件、Pure Component。")]),t._v(" "),_("h1",{attrs:{id:"redux-模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#redux-模式"}},[t._v("#")]),t._v(" redux 模式")]),t._v(" "),_("p",[_("img",{attrs:{src:v(305),alt:""}})]),t._v(" "),_("p",[t._v("react 复杂构建页面渲染，至于逻辑部分就交给 store，下图与上图比较，不难得出：")]),t._v(" "),_("ul",[_("li",[t._v("状态及逻辑从 "),_("code",[t._v("<App />")]),t._v(" 组件独立出来，保存在 "),_("code",[t._v("store")]),t._v("，逻辑部分就是 "),_("code",[t._v("reducer")]),t._v("，通过 "),_("code",[t._v("dispatch")]),t._v(" 向 "),_("code",[t._v("store")]),t._v(" 注入 "),_("code",[t._v("action")]),t._v(" 从而改变 "),_("code",[t._v("store")]),t._v(" 状态，而状态一旦变化，被 "),_("code",[t._v("connect")]),t._v(" 的组件就变化；")]),t._v(" "),_("li",[_("code",[t._v("dispatch")]),t._v(" 向 "),_("code",[t._v("store")]),t._v(" 注入 "),_("code",[t._v("action")]),t._v(" 这个过程是"),_("strong",[t._v("可以被拦截的")]),t._v("，也就是可以加各类 "),_("code",[t._v("middleware")]),t._v(" 中间件，实现一些功能，比如"),_("strong",[t._v("打印日志")]),t._v("；")])]),t._v(" "),_("blockquote",[_("p",[t._v("基本实现低耦合、高复用、易扩展。")])]),t._v(" "),_("h1",{attrs:{id:"redux-saga-模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#redux-saga-模式"}},[t._v("#")]),t._v(" redux-saga 模式")]),t._v(" "),_("p",[_("img",{attrs:{src:v(306),alt:""}})]),t._v(" "),_("p",[t._v("到目前为止我们还没涉及到异步请求，既然注入 "),_("code",[t._v("action")]),t._v(" 过程可以拦截，那本门就用 "),_("code",[t._v("redux-sata")]),t._v(" 这个类库，发起 "),_("code",[t._v("http")]),t._v(" 请求，根据返回值调用 "),_("code",[t._v("action")]),t._v("，进而改变 "),_("code",[t._v("store")]),t._v("。")]),t._v(" "),_("h1",{attrs:{id:"dva-模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dva-模式"}},[t._v("#")]),t._v(" dva 模式")]),t._v(" "),_("p",[_("img",{attrs:{src:v(307),alt:""}})]),t._v(" "),_("p",[t._v("通过图形对比，dva 其实是基于 react + redux + saga + ...做了整合，从而提升编码体验和开发效率。")]),t._v(" "),_("ul",[_("li",[t._v("把 "),_("code",[t._v("store")]),t._v(" 及 "),_("code",[t._v("saga")]),t._v(" 整合到一个 model 文件中;")]),t._v(" "),_("li",[t._v("增加 "),_("code",[t._v("subscriptions")]),t._v(" 功能，收集其他来源的 "),_("code",[t._v("action")]),t._v("，比如键盘操作；")]),t._v(" "),_("li",[t._v("model 文件写法简洁有效，很实用，是程序员喜欢的方式；")])])])}),[],!1,null,null,null);e.default=a.exports}}]);
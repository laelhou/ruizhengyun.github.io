(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{413:function(v,_,t){"use strict";t.r(_);var a=t(28),r=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[v._v("#")]),v._v(" 前言")]),v._v(" "),t("p",[v._v("当人们讨论架构时，往往更多关注的是后端架构。因为后端的发展比较稳定，更注重代码实现。而前端的发展比后端晚了好多年。大概从Google Map在2005年使用了大量的Ajax之后，人们才意识到原来前端还可以这么做。随后，产生了单页面应用，并诞生了一个又一个的前端应用，直至出于解耦的目的，前后端也开始分离了。")]),v._v(" "),t("p",[v._v("对于只使用后端 API 的前端来看，后端看上去只做 CRUD（增加（Create）、读取查询（Retrieve）、更新（Update）、删除（Delete））。然而，后端并不像看上去那么简单。")]),v._v(" "),t("blockquote",[t("p",[v._v("从架构层面考虑，后端如何实现的？")])]),v._v(" "),t("ul",[t("li",[v._v("高并发")]),v._v(" "),t("li",[v._v("高可用")]),v._v(" "),t("li",[v._v("数据库瓶颈问题：存储的时候要考虑原子性、一致性、隔离性和持久性，使用的时候要考虑通过分表、存储、主从同步来提高性能和并发量，在这个过程中还要考虑备份、迁移、查询速度、效率等问题")]),v._v(" "),t("li",[v._v("代码实现上，使用消息队列来解耦依赖，使用微服务来拆分单体应用等")]),v._v(" "),t("li",[v._v("...")])]),v._v(" "),t("blockquote",[t("p",[v._v("那容易被忽视的"),t("strong",[v._v("前端架构")]),v._v("又是如何实现的呢？")])]),v._v(" "),t("ul",[t("li",[v._v("可用性")]),v._v(" "),t("li",[v._v("性能")]),v._v(" "),t("li",[v._v("模型构建")]),v._v(" "),t("li",[v._v("组件复用")]),v._v(" "),t("li",[v._v("平台设定")]),v._v(" "),t("li",[v._v("浏览器兼容")]),v._v(" "),t("li",[v._v("交互设计")]),v._v(" "),t("li",[v._v("用户体验")]),v._v(" "),t("li",[v._v("移动端设计")]),v._v(" "),t("li",[v._v("桌面应用")]),v._v(" "),t("li",[v._v("物联网")]),v._v(" "),t("li",[v._v("...")])]),v._v(" "),t("h2",{attrs:{id:"理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#理解"}},[v._v("#")]),v._v(" 理解")]),v._v(" "),t("p",[v._v("说起软件架构，常常会想起盖房子。盖房子通常我们的做法是：")]),v._v(" "),t("ul",[t("li",[v._v("地基设计建设，不然房子无法盖")]),v._v(" "),t("li",[v._v("钢筋水泥浇筑，不然房子会歪歪扭扭")]),v._v(" "),t("li",[v._v("后期维护，不然也会出现问题")])]),v._v(" "),t("p",[v._v("那软件架构可借鉴在架构前需要规划、设计、实施和维护这几个阶段。而"),t("strong",[v._v("设计")]),v._v("这个环节最重要的。")]),v._v(" "),t("p",[v._v("总结一下："),t("strong",[v._v("没有最好的架构，只有最适合的架构。没有哪种架构能满足于下个时代的需求，因为架构是需要变化和不断改变的")]),v._v("。其实，每个架构师都想设计出完美架构，不想被后来人吐槽。可现实往往是在设计过程中受能力、人力、财力、时间和环境等各种条件约束，所以最终的架构顶多适合并支持未来一段时间的扩展。所以在设计架构时，得抱着开放的平常新来看待架构设计问题。而后来者，要在熟悉架构后继续优化。")]),v._v(" "),t("h2",{attrs:{id:"步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#步骤"}},[v._v("#")]),v._v(" 步骤")]),v._v(" "),t("h3",{attrs:{id:"了解和收集相关者需求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#了解和收集相关者需求"}},[v._v("#")]),v._v(" 了解和收集相关者需求")]),v._v(" "),t("p",[v._v("比如业务分析员（项目迭代计划）、产品负责人（按时上线）、项目经理（项目所需资源）、技术负责人（架构设计和演进）、测试人员、高层领导（组织战略）。")]),v._v(" "),t("h3",{attrs:{id:"技术讨论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#技术讨论"}},[v._v("#")]),v._v(" 技术讨论")]),v._v(" "),t("p",[v._v("了解架构上的潜在限制。")]),v._v(" "),t("h3",{attrs:{id:"可行性技术方案寻找"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可行性技术方案寻找"}},[v._v("#")]),v._v(" 可行性技术方案寻找")]),v._v(" "),t("p",[v._v("需要从用户体验、性能、安全、代码维护、平台化等方面着手考虑，不同项目侧重点也会不同，所以定好优先级和侧重点对后续工作很有帮助，减少设计上的返工。")]),v._v(" "),t("h3",{attrs:{id:"梳理功能需求和跨功能需求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#梳理功能需求和跨功能需求"}},[v._v("#")]),v._v(" 梳理功能需求和跨功能需求")]),v._v(" "),t("h3",{attrs:{id:"罗列技术风险点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#罗列技术风险点"}},[v._v("#")]),v._v(" 罗列技术风险点")]),v._v(" "),t("h3",{attrs:{id:"方案确认"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方案确认"}},[v._v("#")]),v._v(" 方案确认")]),v._v(" "),t("p",[v._v("和技术委员会、利益相关者确认")]),v._v(" "),t("h3",{attrs:{id:"概念证明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念证明"}},[v._v("#")]),v._v(" 概念证明")]),v._v(" "),t("h3",{attrs:{id:"细节细化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#细节细化"}},[v._v("#")]),v._v(" 细节细化")]),v._v(" "),t("h3",{attrs:{id:"需求排期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#需求排期"}},[v._v("#")]),v._v(" 需求排期")]),v._v(" "),t("p",[v._v("根据业务和技术")])])}),[],!1,null,null,null);_.default=r.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{298:function(t,s,e){t.exports=e.p+"assets/img/vscode.setting.30806503.png"},455:function(t,s,e){"use strict";e.r(s);var a=e(28),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"格式化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#格式化"}},[t._v("#")]),t._v(" 格式化")]),t._v(" "),a("h2",{attrs:{id:"打开配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#打开配置文件"}},[t._v("#")]),t._v(" 打开配置文件")]),t._v(" "),a("p",[t._v("项目开发少不了多人协作，难免会碰到这类问题：由于大家对代码格式化配置不统一，就会产生版本冲突")]),t._v(" "),a("p",[t._v("1."),a("strong",[a("code",[t._v("Code -> preferences(首选配置) -> setting(设置)")])]),t._v("; 2.快捷键 "),a("code",[t._v("command + ,")]),t._v(";")]),t._v(" "),a("p",[t._v("配置模式界面就打开了，点击右上角红色区域按钮，就可以打开 "),a("code",[t._v("setting.json")]),t._v(" 文件了。")]),t._v(" "),a("p",[a("img",{attrs:{src:e(298),alt:"配置文件"}})]),t._v(" "),a("h2",{attrs:{id:"编写配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写配置文件"}},[t._v("#")]),t._v(" 编写配置文件")]),t._v(" "),a("p",[t._v("这块配置支持 "),a("code",[t._v("html、css、js")]),t._v(" 等文件的格式化")]),t._v(" "),a("h2",{attrs:{id:"eslint-和-prettier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eslint-和-prettier"}},[t._v("#")]),t._v(" eslint 和 prettier")]),t._v(" "),a("p",[t._v("1."),a("code",[t._v("eslint")]),t._v(" 是用来做"),a("strong",[t._v("代码风格检查")]),t._v("的，比较关注代码质量，并且会提示不符合风格规范的代码。除此之外 "),a("code",[t._v("eslint")]),t._v(" 也具有一部分代码格式化的功能。这块配置长成这样")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保存时格式化")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"editor.formatOnSave"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置 eslint 保存时自动修复")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eslint.autoFixOnSave"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),a("p",[t._v("2."),a("code",[t._v("prettier")]),t._v(" 本身就是用来做代码格式化的，准确的说它是来美化代码的，所以这方面有更大的优势。同时 "),a("code",[t._v("prettier")]),t._v(" 也是对 "),a("code",[t._v("eslint")]),t._v(" 格式化的基础上的一个极好的补充。")]),t._v(" "),a("ul",[a("li",[t._v("那么两者都有格式化的功能，就不会有冲突吗？\n有，不过只要简单的配置就可以解决了，比如语句末尾不加分号和强制单引号等 eslint 风格检查")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prettier 设置语句末尾不加分号")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prettier.semi"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prettier 设置强制单引号")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prettier.singleQuote"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),a("h2",{attrs:{id:"vue-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-文件"}},[t._v("#")]),t._v(" vue 文件")]),t._v(" "),a("p",[t._v("vscode 对 vue 支持也是很给力的，只需用 "),a("strong",[t._v("Vetur 插件")]),t._v("，其配置直接用的 prettier 规范。这也是我们选择 "),a("strong",[t._v("prettier 格式化代码")]),t._v("的另一个原因。")]),t._v(" "),a("h2",{attrs:{id:"冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#冲突"}},[t._v("#")]),t._v(" 冲突")]),t._v(" "),a("ol",[a("li",[t._v("eslint 推荐 "),a("code",[t._v("function () {}")]),t._v("、prettier 则推荐"),a("code",[t._v("function() {}")]),t._v("，如果喜欢用第一种风格那什么都不应该，如果你和我一样喜欢第二种，需要设置 "),a("code",[t._v("eslint.validate")]),t._v(", 将自动修复功能注释，保证走 "),a("code",[t._v("prettier")]),t._v(" 规范。如果项目中也设置了 "),a("code",[t._v("eslint")]),t._v("，还需要在 "),a("code",[t._v("eslintrc.js")]),t._v(" 中配置，")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eslintrc.js")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  rules"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'space-before-function-paren'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);